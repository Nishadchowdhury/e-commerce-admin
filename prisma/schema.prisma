// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

//forst we need to setup and connect the DB
datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// it's time to create a model
model Store {
  id        String      @id @default(uuid())
  name      String
  userId    String
  createAt  DateTime    @default(now())
  updateAt  DateTime    @updatedAt
  Category  Category[]  @relation("StoreToCategory")
  Billboard Billboard[] @relation("StoreToBillboard")
  Size      Size[]      @relation("StoreToSize")
  Color     Color[]     @relation("StoreToColor")
  Product   Product[]   @relation("StoreToProduct")
}

// modle for billboard
model Billboard {
  id        String     @id @default(uuid())
  // relatio the bb with stores. So billboard can only be exist in a specific store.
  storeId   String // we defined the store id here.
  store     Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  // we defined the relation here. this relation connects to the ralation to the store with the name. It's targetting the fields the storeId.
  catagory  Category[]
  label     String
  imageUrl  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[] @relation("CategoryToProduct")

  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  product   Product[]
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Color {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  product   Product[]
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

//in product we will have relation with ["store", "category", "size", "color", "image"]
model Product {
  id String @id @default(uuid())

  //relations
  storeId    String
  categoryId String
  sizeId     String
  colorId    String
  store      Store    @relation("StoreToProduct", fields: [storeId], references: [id])
  category   Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  size       Size     @relation(fields: [sizeId], references: [id])
  color      Color    @relation(fields: [colorId], references: [id])

  // product object
  name       String
  price      Decimal //
  isFeatured Boolean  @default(false)
  isArchived Boolean  @default(false)
  images     Image[]
  createdAt  DateTime @default(now())
  uodatedAt  DateTime @updatedAt

  // indexing
  @@index([storeId])
  @@index([categoryId])
  @@index([colorId])
  @@index([sizeId])
}

model Image {
  id        String  @id @default(uuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  //one thing that define what happen with the images related with the product after delete the product.
  // we added onDelete Cascade => means the Prisma checks the relation with cascade relation and delete the associated tables with its perent table.

  url       String
  createdAt DateTime @default(now())
  uodatedAt DateTime @updatedAt

  @@index([productId])
}
